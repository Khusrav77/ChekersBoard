//
//  CheckersGame.swift
//  ChekerBoardTest
//
//  Created by Khusrav Safiev on 3/14/24.
//

import Foundation

class CheckersGame {
    var board: [[String]] = []
    var currentPlayer: Player = .red
    
    
    
    enum Player: String {
        case red = "Red"
        case black = "Black"
    }
    
    init() {
        initializeBoard()
        printBoard()
    }
   
    /*
     –≠—Ç–æ—Ç –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞—à–µ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∏–≥—Ä—ã –≤ —à–∞—à–∫–∏. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç:

     1. –î–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª `for`:
        - –í–ª–æ–∂–µ–Ω–Ω—ã–π —Ü–∏–∫–ª `for` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö –∫–ª–µ—Ç–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ. –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª `for` (`for i in 0..<8`) –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å–∫–∏, –∞ –≤—Ç–æ—Ä–æ–π —Ü–∏–∫–ª `for` (`for j in 0..<8`) –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —Å—Ç–æ–ª–±—Ü—ã.

     2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è `(i + j) % 2 == 1`:
        - –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–º–º–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫–∏ `i` –∏ —Å—Ç–æ–ª–±—Ü–∞ `j` –Ω–µ—á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –æ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ—Ä–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –Ω–µ—á–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö.

     3. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è `if`:
        - –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ `(i + j) % 2 == 1` –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç, –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —á–µ—Ä–Ω–æ–π –∫–ª–µ—Ç–∫–µ –¥–æ—Å–∫–∏. –î–∞–ª–µ–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è `if` –ø—Ä–æ–≤–µ—Ä—è—é—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –∫–ª–µ—Ç–∫–∞ –≤—ã—à–µ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫ –∏–ª–∏ –Ω–∏–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫.
        - –ï—Å–ª–∏ `i < 3`, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –≤–µ—Ä—Ö–Ω–∏—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–æ—Å–∫–∏, –∏ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—É—é —à–∞—à–∫—É –Ω–∞ —ç—Ç—É –∫–ª–µ—Ç–∫—É (`board[i][j] = "üî¥"`).
        - –ï—Å–ª–∏ `i > 4`, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω–∏–∂–Ω–∏—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–æ—Å–∫–∏, –∏ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–Ω—É—é —à–∞—à–∫—É –Ω–∞ —ç—Ç—É –∫–ª–µ—Ç–∫—É (`board[i][j] = "‚ö´Ô∏è"`).

     –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —ç—Ç–æ—Ç –∫–æ–¥ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞—à–µ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ, –≥–¥–µ –∫—Ä–∞—Å–Ω—ã–µ —à–∞—à–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–∏—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –∞ —á–µ—Ä–Ω—ã–µ —à–∞—à–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–∏–∂–Ω–∏—Ö —Ç—Ä–µ—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ —á–µ—Ä–Ω—ã—Ö –∫–ª–µ—Ç–∫–∞—Ö –¥–æ—Å–∫–∏.
     */
        func initializeBoard() {
            board = Array(repeating: Array(repeating: "‚ö™Ô∏è ", count: 8), count: 8)
            
            for i in 0..<8 {
                for j in 0..<8 {
                    if (i + j) % 2 == 1 {
                        if i < 3 {
                            board[i][j] = "üî¥"  // Red piece
                        } else if i > 4 {
                            board[i][j] = "‚ö´Ô∏è"  // Black piece
                        }
                    }
                }
            }
        }
    func printBoard() {
            for row in board {
                print(row.joined(separator: " "))
            }
            print("\n\(currentPlayer.rawValue)'s turn:") // ??? !
        }
    
    
    func isValidMove(fromRow: Int, fromCol: Int, toRow: Int, toCol: Int) -> Bool {
           // Implement your logic for checking if the move is valid
           // For simplicity, let's assume any diagonal move is valid for now
           return abs(toRow - fromRow) == 1 && abs(toCol - fromCol) == 1
       }
    
    func makeMove(fromRow: Int, fromCol: Int, toRow: Int, toCol: Int) {
            if isValidMove(fromRow: fromRow, fromCol: fromCol, toRow: toRow, toCol: toCol) {
                board[toRow][toCol] = board[fromRow][fromCol]
                board[fromRow][fromCol] = " "
                switchPlayer()
                printBoard()
            } else {
                print("Invalid move. Try again.")
            }
        }
    
    /*
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è `switchPlayer()` –∏–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ. –í –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–æ–±—ã—á–Ω–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫) –≤ –∫–∞—á–µ—Å—Ç–≤–µ `currentPlayer`. –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Ö–æ–¥, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –µ–≥–æ —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ.

    –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã, –µ—Å–ª–∏ `currentPlayer` –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ `.red`, —Ç–æ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ `switchPlayer()`, `currentPlayer` –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ `.black`, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –∏–≥—Ä–µ –®–∞—à–∫–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–≤–µ—Ä—à–∞—Ç—å —Å–≤–æ–∏ —Ö–æ–¥—ã –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ.
    */
    func switchPlayer() {
          currentPlayer = (currentPlayer == .red) ? .black : .red // ??? !
      }
    
    func startGame() {
        print("Welcome to Checkers!")
        while !isGameFinished() {
            print("Enter your move (fromRow fromCol toRow toCol):")
            if let input = readLine(), let move = parseMove(input) {
                makeMove(fromRow: move.fromRow, fromCol: move.fromCol, toRow: move.toRow, toCol: move.toCol)
            } else {
                print("Invalid input. Please enter valid move.")
            }
        }
        print("\(currentPlayer.rawValue) wins!")
    }
    
    func isGameFinished() -> Bool {
        // Implement your logic to check if the game is finished
        // For simplicity, let's assume the game finishes when one player has no pieces left
        let piecesLeft = board.flatMap { $0 }.filter { $0 == "‚óè" || $0 == "‚óâ" }
        return piecesLeft.count <= 1
    }

    func parseMove(_ input: String) -> (fromRow: Int, fromCol: Int, toRow: Int, toCol: Int)? {
        let components = input.split(separator: " ").compactMap { Int($0) }
        guard components.count == 4 else { return nil }
        return (components[0], components[1], components[2], components[3])
    }
}

let game = CheckersGame()



